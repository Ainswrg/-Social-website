{"version":3,"sources":["components/Main/Profile/MyPost/Post/Post.module.css","components/Main/Profile/ProfileInfo/ProfileInfo.module.css","components/Main/Profile/ProfileInfo/ProfileStatus/ProfileStatus.module.css","components/Main/Profile/MyPost/Post/Post.jsx","components/Main/Profile/MyPost/PostInput/PostMe.jsx","components/Main/Profile/MyPost/MyPost.jsx","components/Main/Profile/MyPost/MyPostContainer.jsx","components/Main/Profile/ProfileInfo/ProfileStatus/ProfileStatusWithHooks.jsx","components/Main/Profile/ProfileInfo/ProfileInfo.jsx","components/Main/Profile/Profile.jsx","components/Main/Profile/ProfileContainer.jsx"],"names":["module","exports","Post","props","className","s","posts","item","src","logo","alt","message","likesCount","validationPost","Yup","newPost","max","required","PostForm","enableReinitialize","initialValues","validationSchema","onSubmit","handleSubmit","FormikField","type","label","name","rows","placeholder","MyPost","postsElement","reverse","map","p","id","values","setSubmitting","addPost","MyPostContainer","connect","state","profilePage","newPostText","dispatch","addPostActionCreator","ProfileStatusWithHooks","updateStatus","useState","editMode","setEditMode","status","setStatus","useEffect","status_wrapper","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","ProfileInfo","contacts","profile","Object","entries","content","jumbotron","content__info","photos","large","avatar","description","fullName","aboutMe","lookingForAJobDescription","Preloader","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","React","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.1f5c1d42.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"Post_posts__3AJ2f\",\"item\":\"Post_item__bTdpQ\",\"logo\":\"Post_logo__14lCb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"jumbotron\":\"ProfileInfo_jumbotron__RRjlN\",\"content__info\":\"ProfileInfo_content__info__1fc9N\",\"logo\":\"ProfileInfo_logo__2u1LW\",\"description\":\"ProfileInfo_description__3cAC2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"status_wrapper\":\"ProfileStatus_status_wrapper__3_6tU\"};","import s from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n   return (\r\n      <div className={s.posts}>\r\n         <div className={s.item}>\r\n            <img src=\"https://www.w3schools.com/howto/img_avatar.png\" className={s.logo} alt=\"logo\" />\r\n            {props.message} \r\n            <div>\r\n               <span>Like {props.likesCount}</span>\r\n            </div>\r\n         </div>\r\n      </div >\r\n   )\r\n}\r\n\r\nexport default Post;","import React from \"react\";\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Yup from \"yup\";\r\n\r\nimport \"./styles-custom.css\";\r\nimport FormikField from \"../../../../shared/FormikField/FormikField\";\r\nimport { StyledPostButton } from \"../../../../Styles\";\r\n\r\nconst validationPost = Yup.object({\r\n   newPost: Yup.string()\r\n      .max(15, \"Must be 15 characters or less\")\r\n      .required(\"Required\"),\r\n})\r\n\r\n\r\nconst PostForm = (props) => {\r\n   return (\r\n      <>\r\n         <h1>My Post</h1>\r\n         <Formik\r\n            enableReinitialize\r\n            initialValues={props.initialValues}\r\n            validationSchema={validationPost}\r\n            onSubmit={props.handleSubmit}\r\n         >\r\n            <Form>\r\n               <FormikField\r\n                  type=\"textarea\"\r\n                  label=\"New Post\"\r\n                  name=\"newPost\"\r\n                  rows=\"6\"\r\n                  placeholder=\"Once upon a time there was a princess who lived at the top of a glass hill.\"\r\n               />\r\n\r\n               <StyledPostButton type=\"submit\">Submit</StyledPostButton>\r\n            </Form>\r\n         </Formik>\r\n      </>\r\n   );\r\n};\r\n\r\nexport default PostForm;\r\n","import React from 'react';\r\nimport Post from './Post/Post';\r\nimport PostForm from './PostInput/PostMe';\r\n\r\nconst MyPost = (props) => {\r\n   let postsElement = [...props.posts].reverse().map(p => <Post message={p.message} key={p.id} likesCount={p.likesCount} />);\r\n\r\n   const handleSubmit = (values, { setSubmitting }) => {\r\n      props.addPost(values.newPost);\r\n      values.newPost = \"\";\r\n      setSubmitting(false);\r\n   }\r\n\r\n   const initialValues = {\r\n      newPost: '',\r\n   }\r\n   \r\n   return (\r\n      <>\r\n         <PostForm\r\n            handleSubmit={handleSubmit}\r\n            initialValues={initialValues}\r\n            />\r\n         {postsElement}\r\n      </>\r\n   )\r\n}\r\n\r\nexport default MyPost;","import { connect } from 'react-redux';\r\nimport {  addPostActionCreator } from '../../../../Redux/profile-reducer';\r\nimport MyPost from './MyPost';\r\n\r\nlet mapStateToProps = (state) => {\r\n   return {\r\n      posts: state.profilePage.posts,\r\n      newPostText: state.profilePage.newPostText,\r\n   }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n   return {\r\n       addPost: (newPostText) => {\r\n           dispatch(addPostActionCreator(newPostText));\r\n       }\r\n   }\r\n}\r\n\r\nconst MyPostContainer = connect(mapStateToProps, mapDispatchToProps)(MyPost);\r\nexport default MyPostContainer;","import React, { useEffect, useState } from \"react\";\r\nimport s from \"./ProfileStatus.module.css\";\r\n\r\nconst ProfileStatusWithHooks = ({updateStatus,...props}) => {\r\n\r\n   let [editMode, setEditMode] = useState(false);\r\n   let [status, setStatus] = useState(props.status);\r\n\r\n   useEffect(() => {\r\n      setStatus(props.status);\r\n   }, [props.status]);\r\n\r\n   const activateEditMode = () => {\r\n      setEditMode(true)\r\n   }\r\n\r\n   const deactivateEditMode = () => {\r\n      setEditMode(false);\r\n      updateStatus(status);\r\n   }\r\n\r\n   const onStatusChange = (e) => {\r\n      setStatus(e.currentTarget.value);\r\n   }\r\n\r\n   return (\r\n      <div className={s.status_wrapper}>\r\n         { !editMode &&\r\n            <div>\r\n               <span onDoubleClick={activateEditMode}>\r\n                  {props.status || \"-------\"}{\" \"}\r\n               </span>\r\n            </div>\r\n         }\r\n         { editMode && \r\n            <div>\r\n               <input\r\n                  onChange={onStatusChange}\r\n                  autoFocus={true}\r\n                  onBlur={deactivateEditMode}\r\n                  value={status}\r\n               />\r\n            </div>\r\n         }\r\n      </div>\r\n   );\r\n};\r\n\r\nexport default ProfileStatusWithHooks;\r\n","import Preloader from \"../../../common/Preloader/Preloader\";\r\nimport s from \"./ProfileInfo.module.css\";\r\nimport avatar from '../../../../assets/img/avatar.png'\r\nimport ProfileStatusWithHooks from \"./ProfileStatus/ProfileStatusWithHooks\";\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus}) => {\r\n   let contacts;\r\n   profile\r\n      && (contacts = Object.entries(profile.contacts).map((value) => (\r\n            <li key={value}>\r\n               {value[0]} : {value[1]}\r\n            </li>\r\n         )));\r\n   if (!profile) {\r\n      return <Preloader />;\r\n   } else {\r\n      return (\r\n         <div className={s.content}>\r\n            <div className={s.jumbotron}></div>\r\n            <div className={s.content__info}>\r\n               <div>\r\n               <img\r\n                  src={profile.photos.large ? profile.photos.large : avatar}\r\n                  className={s.logo}\r\n                  alt=\"logo\"\r\n               />\r\n               <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n               </div>\r\n               <div className={s.description}>\r\n                  <h2>{profile.fullName}</h2>\r\n                  <p>{profile.aboutMe}</p>\r\n                  <ul>{contacts}</ul>\r\n                  <p>{profile.lookingForAJobDescription}</p>\r\n               </div>\r\n            </div>\r\n         </div>\r\n      );\r\n   }\r\n};\r\n\r\nexport default ProfileInfo;\r\n","import { StyledWrapper } from \"../../Styles\";\r\nimport MyPostContainer from \"./MyPost/MyPostContainer\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\n\r\nconst Profile = (props) => {\r\n   return (\r\n      <StyledWrapper>\r\n         <ProfileInfo\r\n            profile={props.profile}\r\n            status={props.status}\r\n            updateStatus={props.updateStatus}\r\n         />\r\n         <MyPostContainer />\r\n      </StyledWrapper>\r\n   );\r\n};\r\n\r\nexport default Profile;\r\n","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n   getUserProfile,\r\n   getStatus,\r\n   updateStatus,\r\n} from \"../../../Redux/profile-reducer\";\r\nimport { withRouter } from \"react-router\";\r\nimport { compose } from \"redux\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n   componentDidMount() {\r\n      let userId = this.props.match.params.userId;\r\n      if (!userId) {\r\n         userId = this.props.authorizedUserId;\r\n         if (!userId) {\r\n            this.props.history.push(\"/login\");\r\n         }\r\n      }\r\n      if(userId) {\r\n         this.props.getUserProfile(userId);\r\n         this.props.getStatus(userId);\r\n      }\r\n      \r\n   }\r\n\r\n   render() {\r\n      return (\r\n         <Profile\r\n            {...this.props}\r\n            profile={this.props.profile}\r\n            status={this.props.status}\r\n            updateStatus={this.props.updateStatus}\r\n         />\r\n      );\r\n   }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n   profile: state.profilePage.profile,\r\n   status: state.profilePage.status,\r\n   authorizedUserId: state.auth.userId,\r\n   isAuth: state.auth.isAuth,\r\n});\r\n\r\nexport default compose(\r\n   connect(mapStateToProps, { getUserProfile, getStatus, updateStatus }),\r\n   withRouter,\r\n)(ProfileContainer);\r\n"],"sourceRoot":""}